syntax = "proto3";
package sentinel.node.v1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "sentinel/types/v1/status.proto";

option go_package = "github.com/sentinel-official/hub/v12/x/node/types/v1";
option (gogoproto.equal_all) = false;
option (gogoproto.goproto_getters_all) = false;

// MsgRegisterRequest defines the SDK message for registering a node
message MsgRegisterRequest {
  string from = 1;
  string provider = 2;
  repeated cosmos.base.v1beta1.Coin price = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string remote_url = 4 [(gogoproto.customname) = "RemoteURL"];
}

// MsgUpdateRequest defines the SDK message for updating a node
message MsgUpdateRequest {
  string from = 1;
  string provider = 2;
  repeated cosmos.base.v1beta1.Coin price = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string remote_url = 4 [(gogoproto.customname) = "RemoteURL"];
}

// MsgSetStatusRequest defines the SDK message for modifying the status of a
// node
message MsgSetStatusRequest {
  string from = 1;
  sentinel.types.v1.Status status = 2;
}

// MsgRegisterResponse defines the response of message MsgRegisterRequest
message MsgRegisterResponse {}

// MsgUpdateResponse defines the response of message MsgUpdateRequest
message MsgUpdateResponse {}

// MsgSetStatusResponse defines the response of message MsgSetStatusRequest
message MsgSetStatusResponse {}

service MsgService {
  rpc MsgRegister(MsgRegisterRequest) returns (MsgRegisterResponse);
  rpc MsgUpdate(MsgUpdateRequest) returns (MsgUpdateResponse);
  rpc MsgSetStatus(MsgSetStatusRequest) returns (MsgSetStatusResponse);
}
