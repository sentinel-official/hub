// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sentinel/plan/v1/plan.proto

package v1

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types1 "github.com/sentinel-official/hub/v12/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Plan struct {
	Id       uint64                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider string                                   `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Price    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price"`
	Validity time.Duration                            `protobuf:"bytes,4,opt,name=validity,proto3,stdduration" json:"validity"`
	Bytes    github_com_cosmos_cosmos_sdk_types.Int   `protobuf:"bytes,5,opt,name=bytes,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bytes"`
	Status   types1.Status                            `protobuf:"varint,6,opt,name=status,proto3,enum=sentinel.types.v1.Status" json:"status,omitempty"`
	StatusAt time.Time                                `protobuf:"bytes,7,opt,name=status_at,json=statusAt,proto3,stdtime" json:"status_at"`
}

func (m *Plan) Reset()         { *m = Plan{} }
func (m *Plan) String() string { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()    {}
func (*Plan) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21366ce9b6e0371, []int{0}
}
func (m *Plan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Plan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Plan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plan.Merge(m, src)
}
func (m *Plan) XXX_Size() int {
	return m.Size()
}
func (m *Plan) XXX_DiscardUnknown() {
	xxx_messageInfo_Plan.DiscardUnknown(m)
}

var xxx_messageInfo_Plan proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Plan)(nil), "sentinel.plan.v1.Plan")
}

func init() { proto.RegisterFile("sentinel/plan/v1/plan.proto", fileDescriptor_b21366ce9b6e0371) }

var fileDescriptor_b21366ce9b6e0371 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x8e, 0xd4, 0x30,
	0x10, 0xc6, 0xe3, 0xfd, 0xc7, 0x9e, 0x91, 0x4e, 0xc8, 0xa2, 0xc8, 0x2d, 0x92, 0x13, 0x51, 0xa0,
	0x34, 0x67, 0x93, 0x85, 0x1e, 0xdd, 0x72, 0x0d, 0x1d, 0x0a, 0x88, 0x82, 0x06, 0x39, 0x89, 0x37,
	0x67, 0x91, 0x8d, 0xa3, 0xd8, 0x89, 0xd8, 0xb7, 0x38, 0x51, 0xf1, 0x08, 0x88, 0x27, 0xd9, 0xf2,
	0x4a, 0x44, 0x71, 0x07, 0xd9, 0x17, 0x41, 0xb1, 0x93, 0x08, 0x41, 0x43, 0x95, 0xb1, 0x67, 0x3e,
	0xcf, 0xef, 0x9b, 0x09, 0x7c, 0xa4, 0x78, 0xa1, 0x45, 0xc1, 0x73, 0x5a, 0xe6, 0xac, 0xa0, 0x4d,
	0x68, 0xbe, 0xa4, 0xac, 0xa4, 0x96, 0xe8, 0xc1, 0x90, 0x24, 0xe6, 0xb2, 0x09, 0x57, 0x38, 0x91,
	0x6a, 0x27, 0x15, 0x8d, 0x99, 0xe2, 0xb4, 0x09, 0x63, 0xae, 0x59, 0x48, 0x13, 0x29, 0x7a, 0xc5,
	0xea, 0x61, 0x26, 0x33, 0x69, 0x42, 0xda, 0x45, 0xfd, 0x2d, 0xce, 0xa4, 0xcc, 0x72, 0x4e, 0xcd,
	0x29, 0xae, 0xb7, 0x34, 0xad, 0x2b, 0xa6, 0x85, 0x1c, 0x54, 0xde, 0xdf, 0x79, 0x2d, 0x76, 0x5c,
	0x69, 0xb6, 0x2b, 0x87, 0x07, 0x46, 0x4a, 0xbd, 0x2f, 0xb9, 0xea, 0x30, 0x95, 0x66, 0xba, 0x56,
	0x36, 0xff, 0xf8, 0xf3, 0x14, 0xce, 0x5e, 0xe7, 0xac, 0x40, 0xa7, 0x70, 0x22, 0x52, 0x17, 0xf8,
	0x20, 0x98, 0x45, 0x13, 0x91, 0xa2, 0x15, 0x5c, 0x96, 0x95, 0x6c, 0x44, 0xca, 0x2b, 0x77, 0xe2,
	0x83, 0xe0, 0x24, 0x1a, 0xcf, 0x88, 0xc1, 0x79, 0x59, 0x89, 0x84, 0xbb, 0x53, 0x7f, 0x1a, 0xdc,
	0x5f, 0x9f, 0x11, 0xeb, 0x8d, 0x74, 0xde, 0x48, 0xef, 0x8d, 0xbc, 0x94, 0xa2, 0xd8, 0x3c, 0x3d,
	0xdc, 0x7a, 0xce, 0xb7, 0x3b, 0x2f, 0xc8, 0x84, 0xbe, 0xaa, 0x63, 0x92, 0xc8, 0x1d, 0xed, 0x07,
	0x61, 0x3f, 0xe7, 0x2a, 0xfd, 0x68, 0xd1, 0x8c, 0x40, 0x45, 0xf6, 0x65, 0xf4, 0x02, 0x2e, 0x1b,
	0x96, 0x8b, 0x54, 0xe8, 0xbd, 0x3b, 0xf3, 0x81, 0xe9, 0x62, 0xbd, 0x92, 0xc1, 0x2b, 0xb9, 0xec,
	0x67, 0xb1, 0x59, 0x76, 0x5d, 0xbe, 0xdc, 0x79, 0x20, 0x1a, 0x45, 0xe8, 0x12, 0xce, 0xe3, 0xbd,
	0xe6, 0xca, 0x9d, 0x77, 0xf0, 0x1b, 0xd2, 0x95, 0xfc, 0xb8, 0xf5, 0x9e, 0xfc, 0x07, 0xc8, 0xab,
	0x42, 0x47, 0x56, 0x8c, 0x42, 0xb8, 0xb0, 0xe3, 0x72, 0x17, 0x3e, 0x08, 0x4e, 0xd7, 0x67, 0x64,
	0x5c, 0xac, 0xad, 0x6d, 0x42, 0xf2, 0xc6, 0x14, 0x44, 0x7d, 0x21, 0xba, 0x80, 0x27, 0x36, 0xfa,
	0xc0, 0xb4, 0x7b, 0xcf, 0xa0, 0xaf, 0xfe, 0x41, 0x7f, 0x3b, 0xac, 0xc9, 0xb2, 0x5f, 0x1b, 0x76,
	0x2b, 0xbb, 0xd0, 0x9b, 0x77, 0x87, 0x5f, 0xd8, 0xf9, 0xda, 0x62, 0xe7, 0xd0, 0x62, 0x70, 0xd3,
	0x62, 0xf0, 0xb3, 0xc5, 0xe0, 0xfa, 0x88, 0x9d, 0x9b, 0x23, 0x76, 0xbe, 0x1f, 0xb1, 0xf3, 0xfe,
	0xf9, 0x1f, 0x36, 0x06, 0xa2, 0x73, 0xb9, 0xdd, 0x8a, 0x44, 0xb0, 0x9c, 0x5e, 0xd5, 0x31, 0x6d,
	0xc2, 0x35, 0xfd, 0x64, 0x7f, 0xcd, 0x61, 0xf3, 0xf1, 0xc2, 0xf4, 0x7f, 0xf6, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x5b, 0x89, 0xac, 0x16, 0xbb, 0x02, 0x00, 0x00,
}

func (m *Plan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Plan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StatusAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StatusAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPlan(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	if m.Status != 0 {
		i = encodeVarintPlan(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Bytes.Size()
		i -= size
		if _, err := m.Bytes.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPlan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	n2, err2 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Validity, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Validity):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintPlan(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPlan(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlan(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Plan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPlan(uint64(m.Id))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Validity)
	n += 1 + l + sovPlan(uint64(l))
	l = m.Bytes.Size()
	n += 1 + l + sovPlan(uint64(l))
	if m.Status != 0 {
		n += 1 + sovPlan(uint64(m.Status))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StatusAt)
	n += 1 + l + sovPlan(uint64(l))
	return n
}

func sovPlan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlan(x uint64) (n int) {
	return sovPlan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Plan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Plan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Plan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Validity, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bytes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types1.Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StatusAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlan = fmt.Errorf("proto: unexpected end of group")
)
